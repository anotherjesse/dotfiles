#!/bin/sh -f

# By Scott Moser
# http://paste.ubuntu.com/1153294/

disks="$1" && [ -n "$disks" ] ||
   { echo "must give disk image"; exit 1; }
name=${2:-my-example-dom}
network=${3:-default}
#network=${3:-virbr0}
arch=${4:-x86_64}
mem=${5:-4096}
mem=$(($mem*1024)) # let user specify in M, but libvirt wants in k

OIFS="$IFS"; IFS=","; set -- $disks; IFS="$OIFS"

cat <<EOF
<domain type='kvm'>
  <name>$name</name>
  <memory>$mem</memory>
  <currentMemory>$mem</currentMemory>
  <vcpu>1</vcpu>
  <os>
    <type arch='$arch'>hvm</type>
  </os>
  <features>
    <acpi/>
    <apic/>
    <pae/>
  </features>
  <clock offset='utc'/>
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>restart</on_crash>
  <devices>
EOF
devs=abcdefghij
n=0
for disk in "$@"; do
   disk=$(readlink -f "$disk") || { echo "failed to get path to $disk" 1>&2; exit 1; }
   t=${devs#?}
   dev=vd${devs%${t}}
   devs=${devs#?}
   n=$(($n+1))
   cat <<EOF
    <disk type='file' device='disk'>
      <driver name='qemu' type='qcow2'/>
      <source file='$disk'/>
      <target dev='$dev' bus='virtio'/>
      <boot order='$n'/>
    </disk>
EOF
done
cat <<EOF
    <controller type='ide' index='0'>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x1'/>
    </controller>
    <interface type='network'>
      <source network='${network}'/>
      <model type='virtio'/>
    </interface>
    <!--
    <serial type='pty'>
      <target port='0'/>
    </serial>
    -->
    <serial type='file'>
      <target port='0'/>
      <source path="$PWD/${name}-serial.log"/>
    </serial>
    <console type='pty'>
      <target type='serial' port='0'/>
    </console>
    <input type='mouse' bus='ps2'/>
    <graphics type='vnc' autoport='yes' keymap='en-us'/>
    <video>
      <model type='cirrus' vram='9216' heads='1'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x0'/>
    </video>
    <memballoon model='virtio'>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x05' function='0x0'/>
    </memballoon>
  </devices>
</domain>
EOF
